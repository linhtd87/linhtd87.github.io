import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as p,a as n,b as s,d as t,f as e}from"./app-e0c6798c.js";const l="/assets/images/gioi-thieu-unittest-trong-laravel-01.webp",r="/assets/images/gioi-thieu-unittest-trong-laravel-02.webp",u="/assets/images/gioi-thieu-unittest-trong-laravel-04.webp",d="/assets/images/gioi-thieu-unittest-trong-laravel-05.webp",h="/assets/images/gioi-thieu-unittest-trong-laravel-06.webp",g="/assets/images/gioi-thieu-unittest-trong-laravel-07.webp",k="/assets/images/gioi-thieu-unittest-trong-laravel-08.webp",v="/assets/images/gioi-thieu-unittest-trong-laravel-09.webp",m="/assets/images/gioi-thieu-unittest-trong-laravel-10.webp",b="/assets/images/gioi-thieu-unittest-trong-laravel-11.webp",y="/assets/images/gioi-thieu-unittest-trong-laravel-12.webp",f="/assets/images/gioi-thieu-unittest-trong-laravel-13.webp",C="/assets/images/gioi-thieu-unittest-trong-laravel-14.webp",w="/assets/images/gioi-thieu-unittest-trong-laravel-15.webp",x="/assets/images/gioi-thieu-unittest-trong-laravel-16.webp",_="/assets/images/gioi-thieu-unittest-trong-laravel-17.webp",T="/assets/images/gioi-thieu-unittest-trong-laravel-18.png",q={},$=e('<h1 id="gioi-thieu-unittest-trong-laravel" tabindex="-1"><a class="header-anchor" href="#gioi-thieu-unittest-trong-laravel" aria-hidden="true">#</a> Giới thiệu UnitTest trong Laravel</h1><h2 id="unittest" tabindex="-1"><a class="header-anchor" href="#unittest" aria-hidden="true">#</a> Unittest</h2><h3 id="_1-gioi-thieu-unittest" tabindex="-1"><a class="header-anchor" href="#_1-gioi-thieu-unittest" aria-hidden="true">#</a> 1. Giới thiệu UnitTest</h3><ul><li>Cùng với việc viết code thì việc đảm bảo để những dòng code viết ra chạy đúng cũng rất quan trọng. Rất may, Laravel đã<br> cung cấp cho chúng ta các công cụ để việc testing trở nên rất thuận tiện. Trong Laravel có hai loại test là<br> FeatureTest<br> và UnitTest, trong bài viết này ta đề cập đến UnitTest thôi nhé.</li><li>UnitTest: Kiểm thử ở mức đơn vị. Đơn vị ở đây là các đơn vị mã nguồn: class, method,…Trong Laravel là các class Model,<br> Repository,…và các method của những class này.</li><li>Mục tiêu của UnitTest là kiểm tra tính đúng đắn trong xử lý của những đơn vị mã nguồn này.</li><li>Để thực hiện UnitTest chúng ta dùng PHPUnit. Trong Laravel đã tích hợp sẵn PHPUnit nên việc UnitTest trong Laravel<br> tương đối dễ dàng.</li></ul><h3 id="_2-cau-truc-thu-muc-test-trong-laravel" tabindex="-1"><a class="header-anchor" href="#_2-cau-truc-thu-muc-test-trong-laravel" aria-hidden="true">#</a> 2. Cấu trúc thư mục test trong Laravel</h3><figure><img src="'+l+`" alt="Cấu trúc thư mục test trong Laravel" tabindex="0" loading="lazy"><figcaption>Cấu trúc thư mục test trong Laravel</figcaption></figure><ul><li>Danh sách các thư mục: <ul><li>tests: chứa code dành cho việc test</li><li>tests/Feature: chứa các file dành cho FeatureTest</li><li>tests/Unit: chứa các file dành cho UnitTest</li><li>TestCase: là file bootstrap thiết lập môi trường Laravel cho các tests</li><li>phpunit.xml: là file cấu hình cho PHPUnit</li></ul></li><li>Các code dành cho UnitTest nằm trong thư mục tests/Unit. Cấu trúc của thư mục tests/Unit nên giống với cấu trúc bên<br> trong thư mục app.</li><li>Tên của class test sẽ là tên class cần test và thêm hậu tố Test.</li></ul><h3 id="_3-tao-moi-va-chay-unittest" tabindex="-1"><a class="header-anchor" href="#_3-tao-moi-va-chay-unittest" aria-hidden="true">#</a> 3. Tạo mới và chạy UnitTest</h3><p>Để tạo mới một class UnitTest ta chạy lệnh sau:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// Create UnitTest <span class="token keyword">for</span> Model User <span class="token keyword">in</span> app/Models/User
php artisan make:test Models/UserTest <span class="token parameter variable">--unit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Câu lệnh trên sẽ tạo một file test có đường dẫn <code>tests/Unit/Models/UserTest.php</code></p><h4 id="cau-hinh-trong-file-phpunit-xml" tabindex="-1"><a class="header-anchor" href="#cau-hinh-trong-file-phpunit-xml" aria-hidden="true">#</a> Cấu hình trong file phpunit.xml:</h4><ul><li>Ở đây chúng ta có thể chỉ định test case nào được thực hiện cũng như gom chúng lại theo mong muốn<br><img src="`+r+`" alt="Cấu hình trong file phpunit" loading="lazy"></li><li>thẻ <code>&lt;testsuites&gt;</code> : tất cả nhóm cây thư mục được khai báo ở đây</li><li>thẻ <code>&lt;testsuite&gt;</code> : Nơi khai báo cho từng group riêng biệt</li><li>thuộc tính name trong thẻ <code>&lt;testsuite&gt;</code> dùng để đặt tên cho nhóm</li><li>thẻ <code>&lt;directiory&gt;</code>: dùng để khai báo 1 thư mục các test case</li><li>thẻ <code>&lt;file&gt;</code>: dùng để khai báo thêm 1 file cho 1 cây thư mục test case****</li></ul><h4 id="chay-unittest" tabindex="-1"><a class="header-anchor" href="#chay-unittest" aria-hidden="true">#</a> Chạy unittest</h4><p>Để chạy unit test, ta thực hiện câu lệnh sau:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// Run all <span class="token builtin class-name">test</span>
vendor/bin/phpunit
// Run speical <span class="token builtin class-name">test</span>
vendor/bin/phpunit tests/Unit/Models/UserTest.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-assertions" tabindex="-1"><a class="header-anchor" href="#_4-assertions" aria-hidden="true">#</a> 4. Assertions#</h3>`,18),U=e("<li>Assertions là những method rất quan trọng trong quá trình test, assertions giúp ta khẳng định output của các test có<br> đúng với kết quả mong muốn không.</li><li>Một số <code>assertion</code> thường dùng như: <ul><li>assertTrue() / assertFalse() : Khẳng định true hoặc false</li><li>assertEquals() / assertNotEquals() : Khẳng định 2 giá trị có bằng/không bằng nhau</li><li>assertInstanceOf() / assertNotInstanceOf(): Khẳng định đối tượng có phải/ không phải đối tượng của một class</li><li>assertNull()</li><li>assertContains()</li><li>assertCount()</li><li>assertEmpty()</li></ul></li>",2),M=n("br",null,null,-1),S={href:"https://phpunit.readthedocs.io/en/9.5/assertions.html",target:"_blank",rel:"noopener noreferrer"},P=e(`<h4 id="asserttrue-va-assertfalse" tabindex="-1"><a class="header-anchor" href="#asserttrue-va-assertfalse" aria-hidden="true">#</a> assertTrue() và assertFalse()</h4><p>Hai hàm này ý muốn cho phép ta mong muốn sau một quá trình chạy test xong kết quả trả về là true hay false</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Tests<span class="token punctuation">\\</span>Unit</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>TestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>WithFaker</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>RefreshDatabase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * A basic unit test example.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_has_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$users</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Lena&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Misa&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Leona&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token variable">$users</span><span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Lena&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Minh Minh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kết quả</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>OK <span class="token punctuation">(</span><span class="token number">2</span> tests, <span class="token number">4</span> assertions<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="assertequals-va-assertnull" tabindex="-1"><a class="header-anchor" href="#assertequals-va-assertnull" aria-hidden="true">#</a> assertEquals() và assertNull()</h4><p><code>assertEquals()</code> giúp chúng ta so sánh giá trị thực sau một chuối xử lý với giá trị mà chúng ta mong muốn.</p><p><code>assertEmpty()</code> giúp chúng ta kiểm tra xem giá trị mong muốn là null</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">Tests<span class="token punctuation">\\</span>Unit</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>TestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>WithFaker</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>RefreshDatabase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * A basic unit test example.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_has_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$users</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Lena&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Misa&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Leona&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token variable">$users</span><span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Lena&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Minh Minh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_equal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$expected</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Hoang&quot;</span><span class="token punctuation">;</span> 
        <span class="token variable">$actual</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Min Hoang&quot;</span><span class="token punctuation">;</span> 
        
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span> 
            <span class="token variable">$expected</span><span class="token punctuation">,</span> 
            <span class="token variable">$actual</span><span class="token punctuation">,</span> 
            <span class="token string double-quoted-string">&quot;actual value is not equals to expected&quot;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kết quả</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PHPUnit <span class="token number">8.2</span>.5 by Sebastian Bergmann and contributors.

F                                                                   <span class="token number">1</span> / <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>

Time: <span class="token number">64</span> ms, Memory: <span class="token number">10.00</span> MB

There was <span class="token number">1</span> failure:

<span class="token number">1</span><span class="token punctuation">)</span> UserTest::test_equal
actual value is not equals to expected
Failed asserting that two strings are equal.
--- Expected
+++ Actual
@@ @@
-<span class="token string">&#39;Hoang&#39;</span>
+<span class="token string">&#39;Min Hoang&#39;</span>

FAILURES<span class="token operator">!</span>
Tests: <span class="token number">1</span>, Assertions: <span class="token number">1</span>, Failures: <span class="token number">1</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="assertcontains-assertcount-va-assertempty" tabindex="-1"><a class="header-anchor" href="#assertcontains-assertcount-va-assertempty" aria-hidden="true">#</a> assertContains() , assertCount() và assertEmpty()</h4><p>Chúng ta sẽ cùng đi tìm hiểu với 3 hàm assertion làm việc với array nhé.</p><ul><li><code>assertContains()</code>: hàm này mục đích là giá trị mong đợi có tồn tại hay mảng được cung cấp có chưa giá trị mà chúng ta<br> mong đợi hay không</li><li><code>assertCount()</code>: hàm này mong đợi số lượng items trong một mảng kết quả trả về có match với số lượng mà chúng ta mong<br> muốn hay không</li><li><code>assertEmpty()</code>: hàm này mong đợi mảng kết quả trả về rỗng.</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">Tests<span class="token punctuation">\\</span>Unit</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>TestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>WithFaker</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>RefreshDatabase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * A basic unit test example.
     *
     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>
     */</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_contain_princess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
         <span class="token variable">$princesses</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;Linda&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Lisa&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Celindar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
         
         <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token variable">$princesses</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Linda&#39;</span><span class="token punctuation">,</span> <span class="token variable">$princesses</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEmpty</span><span class="token punctuation">(</span><span class="token variable">$princesses</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-mot-so-vi-du-ve-unittest" tabindex="-1"><a class="header-anchor" href="#_5-mot-so-vi-du-ve-unittest" aria-hidden="true">#</a> 5. Một số ví dụ về UnitTest</h3><ul><li>Unit test cho Model</li></ul><p>Ví dụ, ta có Model Post như dưới đây:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">AppModels</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">IlluminateDatabaseEloquentModel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">AppModelsUser</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * The attributes that are mass assignable.
     *
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token variable">$fillable</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;content&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> <span class="token class-name">IlluminateDatabaseEloquentRelationsBelongsTo</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Class test của chúng ta như sau, ở đây ta thực hiện test relationship giữa Post và User:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">TestsUnitModels</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">AppModelsPost</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">AppModelsUser</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">IlluminateDatabaseEloquentRelationsBelongsTo</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">TestsTestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">IlluminateFoundationTestingRefreshDatabase</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">RefreshDatabase</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_post_be_longs_to_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Need to create UserFactory and PostFactory before test</span>
        <span class="token comment">// Use factory to create user and post for test</span>
        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;user_id&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Check foreign key</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getForeignKeyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check instance of beLongsTo</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertInstanceOf</span><span class="token punctuation">(</span><span class="token class-name static-context">BelongsTo</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check instance of User</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertInstanceOf</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token property">user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Unit test cho Repository</li></ul><p>Ví dụ, ta có một PostRepository với method create như dưới đây:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">AppRepositories</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">AppModelsPost</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostRepository</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">model</span> <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">model</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Class test của chúng ta như sau:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">TestsUnitRepositories</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">AppModelsPost</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">AppModelsUser</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">AppRepositoriesPostRepository</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">TestsTestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">IlluminateFoundationTestingWithFaker</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">IlluminateFoundationTestingRefreshDatabase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">FakerFactory</span> <span class="token keyword">as</span> Faker<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostRepositoryTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$postRepository</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">postRepository</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_create_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// create data post</span>
        <span class="token variable">$faker</span> <span class="token operator">=</span> <span class="token class-name static-context">Faker</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$postData</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$faker</span><span class="token operator">-&gt;</span><span class="token property">sentence</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;content&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$faker</span><span class="token operator">-&gt;</span><span class="token property">sentence</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;user_id&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">postRepository</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$postData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check post created instance of Post</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertInstanceOf</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check data post exists in the database</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertDatabaseHas</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token variable">$postData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-reset-database-sau-khi-test" tabindex="-1"><a class="header-anchor" href="#_6-reset-database-sau-khi-test" aria-hidden="true">#</a> 6. Reset database sau khi test</h3><ul><li>Để kết quả những lần test không ảnh hưởng đến những lần test tiếp theo, Laravel đã cung cấp cách thức để reset lại<br> database sau mỗi lần test, bạn chỉ cần sử dụng trait IlluminateFoundationTestingRefreshDatabase trong class test.</li><li>Do databse được reset lại kể cả dữ liệu trước khi chạy test nên hãy cẩn thận khi sử dụng reset database, tốt nhất là<br> nên tạo một database riêng cho việc test.</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">TestsFeature</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">IlluminateFoundationTestingRefreshDatabase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">IlluminateFoundationTestingWithoutMiddleware</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">TestsTestCase</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ExampleTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">RefreshDatabase</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_basic_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-nhung-thanh-phan-can-viet-unittest" tabindex="-1"><a class="header-anchor" href="#_7-nhung-thanh-phan-can-viet-unittest" aria-hidden="true">#</a> 7. Những thành phần cần viết UnitTest</h3><ul><li><strong>Controllers</strong>: với events handling được disable. Toàn bộ các thành phần bên ngoài PHẢI được mock.</li><li><strong>Requests</strong> (nếu có): Kiểm tra validation</li><li><strong>Models</strong>: getters, setters, và những chức năng khác</li><li><strong>Transformers / Presenters</strong> (nếu có): Kiểm tra kết quả output cho những dữ liệu khác nhau</li><li><strong>Repositories</strong> (nếu có): Kiểm tra từng hàm có tạo ra đúng SQL queries hay không, hay có các lời gọi hàm, đến mocked<br> query builder, đúng hay không</li><li><strong>Event listeners</strong></li><li><strong>Queue jobs</strong></li><li><strong>Auth policies</strong></li><li>Và các Class chuyên biệt khác trong project.</li></ul><h3 id="_8-setup-va-teardown" tabindex="-1"><a class="header-anchor" href="#_8-setup-va-teardown" aria-hidden="true">#</a> 8. Setup và Teardown</h3><p>Trường hợp đặt ra là trong class test của chúng ta có rất nhiều biến global và chúng ta phải gán hoặc hủy giá trị này<br> sau mỗi lần chạy test, nếu mỗi testcase đều có những câu lệnh gán và hủy giống nhau thì không ổn. PHPUnit cung cấp các<br> phương thức để giải quyết vấn đề:</p><ul><li><strong>setUp()</strong>: Chạy trước mỗi method test. Sử dụng khi muốn khởi tạo biến, mở kết nối file,... chuẩn bị môi trường để<br> test</li><li><strong>tearDown()</strong>: Chạy sau mỗi method test. Sử dụng để hủy các biến, kết nối,...</li><li><strong>setUpBeforeClass()</strong>: Chạy khi bắt đầu class test</li><li><strong>tearDownAfterClass()</strong>: Chạy sau khi kết thúc class test</li></ul><p>Việc test sẽ lần lượt chạy như sau:</p><ol><li>Method: OddEvenTest::setUp</li><li>Method: OddEvenTest::testOdd</li><li>Method: OddEvenTest::tearDown</li><li>Method: OddEvenTest::setUp</li><li>Method: OddEvenTest::testEven</li><li>Method: OddEvenTest::tearDown</li></ol><h3 id="_9-reflection" tabindex="-1"><a class="header-anchor" href="#_9-reflection" aria-hidden="true">#</a> 9. Reflection</h3><p>Một số test case phải truy cập vào private/protected method hoặc property của đối tượng để thực hiện assertion.</p><p>Ta bổ sung phần code sau đây vào class test:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token doc-comment comment">/**
 * Get private/protected property value
 * $this-&gt;assertEquals(&#39;views/home&#39;, $this-&gt;getObjectProperty($view, &#39;file_name&#39;));
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getObjectProperty</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$propertyName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$reflector</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$property</span> <span class="token operator">=</span> <span class="token variable">$reflector</span><span class="token operator">-&gt;</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token variable">$propertyName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$property</span><span class="token operator">-&gt;</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token variable">$property</span><span class="token operator">-&gt;</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Call protected/private method of a class.
 * $this-&gt;invokeObjectMethod($view, &#39;getData&#39;);
 */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">invokeObjectMethod</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$methodName</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$reflection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$method</span> <span class="token operator">=</span> <span class="token variable">$reflection</span><span class="token operator">-&gt;</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token variable">$methodName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$method</span><span class="token operator">-&gt;</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token variable">$method</span><span class="token operator">-&gt;</span><span class="token function">invokeArgs</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="code-coverage" tabindex="-1"><a class="header-anchor" href="#code-coverage" aria-hidden="true">#</a> Code coverage</h2><h3 id="_1-code-coverage-la-gi" tabindex="-1"><a class="header-anchor" href="#_1-code-coverage-la-gi" aria-hidden="true">#</a> 1. Code coverage là gì?</h3><p>Code coverage là một thước đo mô tả mức độ mã nguồn của chương trình đã được kiểm tra. Đây là một hình thức kiểm<br> thử <code>white-box</code> tìm thấy các khu vực của chương trình không được thực hiện bởi một tập hợp các trường hợp kiểm thử. Nó<br> cũng tạo ra<br> một số trường hợp kiểm thử để tăng phạm vi bao phủ và xác định thước đo định lượng về phạm vi mã.</p><p>Trong hầu hết các trường hợp, hệ thống Code coverage thu thập thông tin về chương trình đang chạy. Nó cũng kết hợp điều<br> đó<br> với thông tin mã nguồn để tạo báo cáo về phạm vi mã của bộ kiểm thử.</p><h3 id="_2-tai-sao-nen-su-dung-code-coverage-testing" tabindex="-1"><a class="header-anchor" href="#_2-tai-sao-nen-su-dung-code-coverage-testing" aria-hidden="true">#</a> 2. Tại sao nên sử dụng Code Coverage Testing?</h3><p>Dưới đây là một số lý do chính để sử dụng <strong>Code Coverage</strong>:</p><ul><li>Nó giúp bạn đo lường hiệu quả của việc thực hiện kiểm thử</li><li>Nó cung cấp một phép đo định lượng.</li><li>Nó xác định mức độ mà mã nguồn đã được kiểm tra.</li></ul><h3 id="_3-phuong-phap-code-coverage" tabindex="-1"><a class="header-anchor" href="#_3-phuong-phap-code-coverage" aria-hidden="true">#</a> 3. Phương pháp Code Coverage</h3><p>Sau đây là các phương pháp bao phủ mã chính</p><ul><li>Statement Coverage</li><li>Decision Coverage</li><li>Branch Coverage</li><li>Coverage Chuyển đổi</li><li>Coverage FSM</li></ul><h3 id="_4-statement-coverage" tabindex="-1"><a class="header-anchor" href="#_4-statement-coverage" aria-hidden="true">#</a> 4. Statement Coverage</h3><p><strong>Statement Coverage</strong> là một kỹ thuật kiểm tra <code>white-box</code> trong đó tất cả các câu lệnh thực thi trong mã nguồn được<br> thực<br> thi ít nhất một lần. Nó được sử dụng để tính toán số lượng câu lệnh trong mã nguồn đã được thực thi. Mục đích chính của<br> Statement Coverage là bao gồm tất cả các đường dẫn, dòng và câu lệnh có thể có trong mã nguồn.</p><p>Phạm vi câu lệnh được sử dụng để rút ra kịch bản dựa trên cấu trúc của mã được kiểm tra.<br><img src="`+u+`" alt="Statement Coverage" loading="lazy"></p><p>Trong <strong>White Box Testing</strong>, tester đang tập trung vào cách phần mềm hoạt động. Nói cách khác, tester sẽ tập trung vào<br> hoạt động nội bộ của mã nguồn liên quan đến biểu đồ dòng chảy điều khiển hoặc biểu đồ dòng chảy.</p><p>Nói chung trong bất kỳ phần mềm nào, nếu chúng ta nhìn vào mã nguồn, sẽ có rất nhiều yếu tố như toán tử, chức năng, vòng<br> lặp, trình xử lý đặc biệt, v.v. Dựa trên đầu vào của chương trình, một số câu lệnh mã có thể không được thực thi. Mục<br> tiêu của phạm vi Tuyên bố là bao gồm tất cả các đường dẫn, dòng và câu lệnh có thể có trong mã.</p><p>Hãy hiểu điều này với một ví dụ, làm thế nào để tính toán phạm vi bảo hiểm báo cáo.</p><p>Kịch bản tính toán Statement Coverage cho mã nguồn nhất định. Ở đây chúng tôi đang thực hiện hai kịch bản khác nhau để<br> kiểm tra tỷ lệ phần trăm phạm vi báo cáo cho mỗi kịch bản.</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>Prints (int a, int b) {                       ------------  Printsum is a function 
    int result = a+ b; 
    If (result&gt; 0)
    	Print (&quot;Positive&quot;, result)
    Else
    	Print (&quot;Negative&quot;, result)
    }                                         -----------   End of the source code 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="scenario-1" tabindex="-1"><a class="header-anchor" href="#scenario-1" aria-hidden="true">#</a> Scenario 1:</h4><p>Nếu A = 3, B = 9</p><figure><img src="`+d+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><p>Các câu lệnh được đánh dấu bằng màu vàng là những câu lệnh được thực hiện theo kịch bản</p><p>Số câu lệnh được thực hiện = 5, Tổng số câu lệnh = 7</p><p>Phạm vi sao kê: 5/7 = 71%</p><figure><img src="'+h+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><p>Tương tự như vậy, chúng ta sẽ thấy kịch bản 2,</p><h4 id="scenario-2" tabindex="-1"><a class="header-anchor" href="#scenario-2" aria-hidden="true">#</a> Scenario 2:</h4><p>Nếu A = -3, B = -9</p><figure><img src="'+g+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><p>Các câu lệnh được đánh dấu bằng màu vàng là những câu lệnh được thực hiện theo kịch bản.</p><p>Số câu lệnh được thực hiện = 6</p><p>Tổng số câu lệnh = 7</p><figure><img src="'+k+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><p>Phạm vi sao kê: 6/7 = 85%</p><figure><img src="'+v+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><p>Nhưng nhìn chung nếu bạn thấy, tất cả các tuyên bố đang được bao phủ bởi cả hai kịch bản. Vì vậy, chúng tôi có thể kết<br> luận rằng phạm vi bảo hiểm tuyên bố tổng thể là 100%.</p><figure><img src="'+m+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><h4 id="statement-coverage-bao-gom-nhung-gi" tabindex="-1"><a class="header-anchor" href="#statement-coverage-bao-gom-nhung-gi" aria-hidden="true">#</a> Statement Coverage bao gồm những gì?</h4><ul><li>Các câu lệnh không sử dụng</li><li>Mã chết</li><li>Chi nhánh không sử dụng</li><li>Thiếu câu lệnh</li></ul><h3 id="_5-decision-coverage-testing" tabindex="-1"><a class="header-anchor" href="#_5-decision-coverage-testing" aria-hidden="true">#</a> 5. Decision Coverage Testing</h3><p><strong>Decision Coverage</strong> là một kỹ thuật kiểm tra <strong>white box</strong> báo cáo kết quả đúng hoặc sai của mỗi biểu thức boolean của<br> mã nguồn. Mục tiêu của kiểm thử <strong>Decision Coverage</strong> là bao quát và xác nhận tất cả các mã nguồn có thể truy cập bằng<br> cách kiểm tra và đảm bảo rằng mỗi nhánh của mọi điểm quyết định có thể được thực thi ít nhất một lần.</p><p>Trong coverage này, các biểu thức đôi khi có thể trở nên phức tạp. Do đó, rất khó để đạt được độ phủ 100%. Đó là lý do<br> tại sao có nhiều phương pháp khác nhau để báo cáo số liệu này. Tất cả các phương pháp này tập trung vào việc bao gồm các<br> kết hợp quan trọng nhất. Nó rất giống với phạm vi bảo hiểm quyết định, nhưng nó cung cấp độ nhạy tốt hơn để kiểm<br> soát dòng chảy.</p><figure><img src="'+b+`" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><h4 id="vi-du-ve-pham-vi-quyet-đinh" tabindex="-1"><a class="header-anchor" href="#vi-du-ve-pham-vi-quyet-đinh" aria-hidden="true">#</a> Ví dụ về phạm vi quyết định</h4><p>Hãy xem xét mã sau-</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>Demo(int a) {                       
     If (a&gt; 5)
    	a=a*3
     Print (a)
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="tinh-huong-1" tabindex="-1"><a class="header-anchor" href="#tinh-huong-1" aria-hidden="true">#</a> Tình huống 1:</h5><p>Giá trị của a là 2</p><figure><img src="`+y+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><p>Mã được tô sáng màu vàng sẽ được thực thi. Ở đây kết quả &quot;Không&quot; của quyết định Nếu (a&gt;5) được kiểm tra.</p><p>Phạm vi quyết định = 50%</p><h5 id="tinh-huong-2" tabindex="-1"><a class="header-anchor" href="#tinh-huong-2" aria-hidden="true">#</a> Tình huống 2:</h5><p>Giá trị của a là 6</p><figure><img src="'+f+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><p>Mã được tô sáng màu vàng sẽ được thực thi. Ở đây kết quả &quot;Có&quot; của quyết định Nếu (a&gt;5) được kiểm tra.</p><p>Phạm vi quyết định = 50%</p><table><thead><tr><th>Test Case</th><th>Value of A</th><th>Output</th><th>Decision Coverage</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2</td><td>50%</td></tr><tr><td>1</td><td>6</td><td>18</td><td>50%</td></tr></tbody></table><h3 id="_6-branch-coverage-testing" tabindex="-1"><a class="header-anchor" href="#_6-branch-coverage-testing" aria-hidden="true">#</a> 6. Branch Coverage Testing</h3><p><strong>Branch Coverage</strong> là một phương pháp kiểm tra <code>white-box</code> trong đó mọi kết quả từ một mô-đun mã (câu lệnh hoặc vòng<br> lặp)<br> đều được kiểm tra. Mục đích của <strong>branch coverage</strong> là đảm bảo rằng mỗi điều kiện quyết định từ mỗi chi nhánh được thực<br> hiện ít nhất một lần. Nó giúp đo lường các phân số của các phân đoạn mã độc lập và tìm ra các phần không có nhánh.</p><p>Ví dụ: nếu kết quả là nhị phân, bạn cần kiểm tra cả kết quả Đúng và Sai.</p><p>Công thức tính Branch Coverage:<br><img src="'+C+`" alt="Statement Coverage" loading="lazy"></p><h4 id="vi-du-ve-branch-coverage" tabindex="-1"><a class="header-anchor" href="#vi-du-ve-branch-coverage" aria-hidden="true">#</a> Ví dụ về Branch Coverage</h4><p>Để tìm hiểu <strong>branch coverage</strong>, hãy xem xét cùng một ví dụ được sử dụng trước đó</p><p>Hãy xem xét mã sau-</p><div class="language-C line-numbers-mode" data-ext="C"><pre class="language-C"><code>Demo(int a) {                       
     If (a&gt; 5)
    	a=a*3
     Print (a)
    }      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+w+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><p><strong>Branch coverage</strong> cũng sẽ xem xét <strong>unconditional branch</strong></p><table><thead><tr><th>Test Case</th><th>Value of A</th><th>Output</th><th>Decision Coverage</th><th>Branch Coverage</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2</td><td>50%</td><td><strong>33%</strong></td></tr><tr><td>1</td><td>6</td><td>18</td><td>50%</td><td><strong>66%</strong></td></tr></tbody></table><p><strong>Branch coverage</strong> cung cấp các ưu điểm sau:</p><ul><li>Cho phép bạn xác thực tất cả các nhánh trong mã</li><li>Giúp bạn đảm bảo rằng không có phân nhánh dẫn đến bất kỳ sự bất thường nào trong hoạt động của chương trình</li><li>Phương pháp <strong>branch coverage</strong> loại bỏ các vấn đề xảy ra do kiểm tra <strong>statement coverage</strong></li><li>Cho phép bạn tìm những khu vực không được kiểm tra bằng các phương pháp thử nghiệm khác</li><li>Nó cho phép bạn tìm một thước đo định lượng về phạm vi mã</li><li><strong>Branch coverage</strong> bỏ qua các nhánh bên trong biểu thức Boolean</li></ul><h3 id="_7-condition-coverage-testing" tabindex="-1"><a class="header-anchor" href="#_7-condition-coverage-testing" aria-hidden="true">#</a> 7. Condition Coverage Testing</h3><p><strong>Condition Coverage</strong> hoặc <strong>expression coverage</strong> là một phương pháp kiểm thử được sử dụng để kiểm tra và đánh giá các<br> biến hoặc biểu thức phụ trong câu lệnh điều kiện. Mục tiêu của <strong>condition coverage</strong> là kiểm tra kết quả cá nhân cho<br> từng điều kiện logic. Bảo hiểm điều kiện cung cấp độ nhạy tốt hơn với luồng điều khiển so với <strong>decision coverage</strong>.<br> Trong coverage này, các biểu thức với toán hạng logic chỉ được xem xét.</p><p>Ví dụ: nếu một biểu thức có các phép toán Boolean như AND, OR, XOR, biểu thị tổng khả năng.</p><p>Bảo hiểm điều kiện không đảm bảo về bảo hiểm quyết định đầy đủ.</p><p><strong>Công thức tính Bảo hiểm điều kiện:</strong></p><figure><img src="'+x+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><p><strong>Example:</strong></p><figure><img src="'+_+'" alt="Statement Coverage" tabindex="0" loading="lazy"><figcaption>Statement Coverage</figcaption></figure><p><strong>Đối với biểu thức trên, chúng ta có 4 kết hợp có thể</strong></p><ul><li>TT</li><li>FF</li><li>TF</li><li>FT</li></ul><p><strong>Hãy xem xét đầu vào sau</strong></p><table><thead><tr><th>X=3</th><th>(x&lt;y)</th><th>TRUE</th><th>Condition Coverage is ¼ = 25%</th></tr></thead><tbody><tr><td>Y=4</td><td></td><td></td><td></td></tr><tr><td>A=3</td><td>(a&gt;b)</td><td>FALSE</td><td></td></tr><tr><td>A=3</td><td></td><td></td><td></td></tr></tbody></table><h3 id="_8-finite-state-machine-coverage" tabindex="-1"><a class="header-anchor" href="#_8-finite-state-machine-coverage" aria-hidden="true">#</a> 8. Finite State Machine Coverage</h3><p><strong>Finite State Machine Coverage</strong> chắc chắn là loại phương pháp <strong>code coverage</strong> phức tạp nhất. Điều này là do nó<br> hoạt động trên hành vi của thiết kế. Trong phương pháp bảo hiểm này, bạn cần tìm xem có bao nhiêu trạng thái cụ thể theo<br> thời gian được truy cập, quá cảnh. Nó cũng kiểm tra có bao nhiêu chuỗi được bao gồm trong một máy trạng thái hữu hạn.</p><h3 id="_9-chon-loai-code-coverage-nao" tabindex="-1"><a class="header-anchor" href="#_9-chon-loai-code-coverage-nao" aria-hidden="true">#</a> 9. Chọn loại <strong>code coverage</strong> nào</h3><p>Đây chắc chắn là câu trả lời khó đưa ra nhất. Để chọn một phương pháp bảo hiểm, người kiểm tra cần kiểm tra xem</p><ul><li>Mã được kiểm tra có một hoặc nhiều lỗi chưa được phát hiện</li><li>Chi phí của hình phạt tiềm năng</li><li>Chi phí mất danh tiếng</li><li>chi phí bán hàng bị mất, v.v.<br> Xác suất lỗi sẽ gây ra thất bại sản xuất tốn kém càng cao, mức độ <strong>coverage</strong> bạn cần chọn càng nghiêm trọng.</li></ul><h3 id="_10-code-coverage-vs-functional-coverage" tabindex="-1"><a class="header-anchor" href="#_10-code-coverage-vs-functional-coverage" aria-hidden="true">#</a> 10. Code Coverage vs. Functional Coverage</h3><p>Code coverage tells you how well the source code has been exercised by your test bench. Functional coverage measures how<br> well the functionality of the design has been covered by your test bench.<br> Never use a design specification Use design specification<br> Done by developers Done by Testers</p><table><thead><tr><th>Code Coverage</th><th>Functional Coverage</th></tr></thead><tbody><tr><td><strong>Code coverage</strong> cho bạn biết mã nguồn đã được thực hiện tốt như thế nào bởi test bench của bạn.</td><td><strong>Functional coverage</strong> đo lường chức năng của thiết kế đã được bao phủ bởi test bench của bạn tốt như thế nào.</td></tr><tr><td>Không bao giờ sử dụng thông số kỹ thuật thiết kế</td><td>Sử dụng đặc điểm kỹ thuật thiết kế</td></tr><tr><td>Thực hiện bởi các nhà phát triển</td><td>Được thực hiện bởi người thử nghiệm</td></tr></tbody></table><h3 id="_11-cong-cu-code-coverage" tabindex="-1"><a class="header-anchor" href="#_11-cong-cu-code-coverage" aria-hidden="true">#</a> 11. Công cụ Code Coverage</h3><p>Dưới đây là danh sách các Công cụ bảo hiểm mã quan trọng:</p><table><thead><tr><th>Tên công cụ</th><th>Sự miêu tả</th></tr></thead><tbody><tr><td>Cobertura</td><td>Nó là một công cụ <strong>code coverage</strong> mã nguồn mở. Nó đo lường phạm vi kiểm thử bằng cách thiết bị một cơ sở mã và phân tích dòng mã nào đang thực thi và dòng nào không được thực thi khi bộ kiểm thử chạy.</td></tr><tr><td>Cỏ ba lá</td><td>Clover cũng giảm thời gian testing bằng cách chỉ chạy các bài kiểm tra bao gồm mã ứng dụng đã được sửa đổi kể từ bản dựng trước.</td></tr><tr><td>Đối tác phát triển</td><td>DevPartner cho phép các nhà phát triển phân tích mã Java cho Chất lượng và độ phức tạp của mã.</td></tr><tr><td>Emma</td><td>EMMA hỗ trợ phạm vi bao phủ class, method, dòng và khối cơ sở, tệp nguồn tổng hợp, class và method levels.</td></tr><tr><td>Kalistick</td><td>Kalistick là một ứng dụng của bên thứ ba phân tích các mã với các quan điểm khác nhau.</td></tr><tr><td>CoView và CoAnt</td><td>Coding Software là một công cụ code coverage cho các metrics, tạo đối tượng giả, khả năng kiểm tra mã, phạm vi đường dẫn &amp;nhánh, v.v.</td></tr><tr><td>Bullseye cho C ++</td><td>BulseyeCoverage là một công cụ code coverage cho C ++ và C.</td></tr><tr><td>Sonar</td><td>Sonar là một công cụ code coverage mở giúp bạn quản lý chất lượng mã.</td></tr></tbody></table><h3 id="_12-uu-điem-va-nhuoc-điem-cua-viec-su-dung-code-coverage" tabindex="-1"><a class="header-anchor" href="#_12-uu-điem-va-nhuoc-điem-cua-viec-su-dung-code-coverage" aria-hidden="true">#</a> 12. Ưu điểm và nhược điểm của việc sử dụng Code Coverage</h3><table><thead><tr><th>Ưu điểm của Code Coverage</th><th>Nhược điểm của Code Coverage</th></tr></thead><tbody><tr><td>Hữu ích để đánh giá một thước đo định lượng về phạm vi mã</td><td>Ngay cả khi bất kỳ tính năng cụ thể nào không được triển khai trong thiết kế, độ bao phủ mã vẫn báo cáo coverage 100%.</td></tr><tr><td>Nó cho phép bạn tạo thêm các trường hợp kiểm thử để tăng phạm vi converage</td><td>Không thể xác định xem chúng tôi đã kiểm tra tất cả các giá trị có thể có của một tính năng với sự trợ giúp của phạm vi mã hay không</td></tr><tr><td>Nó cho phép bạn tìm các khu vực của một chương trình không được thực hiện bởi một tập hợp các trường hợp thử nghiệm</td><td>Code coverage cũng không cho biết bạn đã bao quát logic của mình bao nhiêu và tốt như thế nào</td></tr><tr><td></td><td>Trong trường hợp khi chức năng được chỉ định chưa được triển khai hoặc không được bao gồm trong đặc tả kỹ thuật, thì các kỹ thuật dựa trên cấu trúc không thể tìm thấy vấn đề đó.</td></tr></tbody></table><h3 id="_13-su-dung-phpunit-va-xdebug-4" tabindex="-1"><a class="header-anchor" href="#_13-su-dung-phpunit-va-xdebug-4" aria-hidden="true">#</a> 13. Sử dụng PHPunit và Xdebug [4]</h3><p>Cấu hình phpunit.xml</p><ol><li>Thông tin <strong>Code coverage</strong> trong Thẻ <code>&lt;coverage&gt;</code><br><img src="'+T+`" alt="Statement Coverage" loading="lazy"></li><li>Chạy phpunit</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan <span class="token builtin class-name">test</span> <span class="token parameter variable">--coverage</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>phpunit --coverage-html <span class="token operator">&lt;</span>output-dir<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="nguon" tabindex="-1"><a class="header-anchor" href="#nguon" aria-hidden="true">#</a> Nguồn:</h2>`,141),F={href:"https://viblo.asia/p/gioi-thieu-ve-unit-testing-trong-laravel-LzD5dredZjY",target:"_blank",rel:"noopener noreferrer"},N=n("br",null,null,-1),D={href:"https://viblo.asia/p/co-ban-ve-unittest-trong-laravel-gDVK29Mj5Lj",target:"_blank",rel:"noopener noreferrer"},R=n("br",null,null,-1),E={href:"https://www.guru99.com/code-coverage.html",target:"_blank",rel:"noopener noreferrer"},A=n("br",null,null,-1);function L(B,I){const a=c("ExternalLinkIcon");return o(),p("div",null,[$,n("ul",null,[U,n("li",null,[s("Còn rất nhiều các hàm assertions, các bạn có thể tìm hiểu đầy đủ ở"),M,s(" đây: "),n("a",S,[s("https://phpunit.readthedocs.io/en/9.5/assertions.html"),t(a)])])]),P,n("p",null,[s("[1] "),n("a",F,[s("viblo.asia"),t(a)]),N,s(" [2] "),n("a",D,[s("viblo.asia"),t(a)]),R,s(" [3] Code coverage "),n("a",E,[s("guru99.com"),t(a)]),A,s(" [4] Slice P.V.M.H")])])}const V=i(q,[["render",L],["__file","gioi-thieu-unittest-trong-laravel.html.vue"]]);export{V as default};
