import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c,a as s,b as n,d as t,f as a}from"./app-ab7cadcc.js";const l="/assets/images/gioi-thieu-unittest-trong-laravel-01.webp",r={},u=a('<h1 id="gioi-thieu-unittest-trong-laravel" tabindex="-1"><a class="header-anchor" href="#gioi-thieu-unittest-trong-laravel" aria-hidden="true">#</a> Giới thiệu UnitTest trong Laravel</h1><h2 id="_1-gioi-thieu-unittest" tabindex="-1"><a class="header-anchor" href="#_1-gioi-thieu-unittest" aria-hidden="true">#</a> 1. Giới thiệu UnitTest</h2><ul><li>Cùng với việc viết code thì việc đảm bảo để những dòng code viết ra chạy đúng cũng rất quan trọng. Rất may, Laravel đã<br> cung cấp cho chúng ta các công cụ để việc testing trở nên rất thuận tiện. Trong Laravel có hai loại test là<br> FeatureTest<br> và UnitTest, trong bài viết này ta đề cập đến UnitTest thôi nhé.</li><li>UnitTest: Kiểm thử ở mức đơn vị. Đơn vị ở đây là các đơn vị mã nguồn: class, method,…Trong Laravel là các class Model,<br> Repository,…và các method của những class này.</li><li>Mục tiêu của UnitTest là kiểm tra tính đúng đắn trong xử lý của những đơn vị mã nguồn này.</li><li>Để thực hiện UnitTest chúng ta dùng PHPUnit. Trong Laravel đã tích hợp sẵn PHPUnit nên việc UnitTest trong Laravel<br> tương đối dễ dàng.</li></ul><h2 id="_2-cau-truc-thu-muc-test-trong-laravel" tabindex="-1"><a class="header-anchor" href="#_2-cau-truc-thu-muc-test-trong-laravel" aria-hidden="true">#</a> 2. Cấu trúc thư mục test trong Laravel</h2><figure><img src="'+l+`" alt="Cấu trúc thư mục test trong Laravel" tabindex="0" loading="lazy"><figcaption>Cấu trúc thư mục test trong Laravel</figcaption></figure><ul><li>Danh sách các thư mục: <ul><li>tests: chứa code dành cho việc test</li><li>tests/Feature: chứa các file dành cho FeatureTest</li><li>tests/Unit: chứa các file dành cho UnitTest</li><li>TestCase: là file bootstrap thiết lập môi trường Laravel cho các tests</li><li>phpunit.xml: là file cấu hình cho PHPUnit</li></ul></li><li>Các code dành cho UnitTest nằm trong thư mục tests/Unit. Cấu trúc của thư mục tests/Unit nên giống với cấu trúc bên<br> trong thư mục app.</li><li>Tên của class test sẽ là tên class cần test và thêm hậu tố Test.</li></ul><h2 id="_3-tao-moi-va-chay-unittest" tabindex="-1"><a class="header-anchor" href="#_3-tao-moi-va-chay-unittest" aria-hidden="true">#</a> 3. Tạo mới và chạy UnitTest</h2><p>Để tạo mới một class UnitTest ta chạy lệnh sau:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php artisan make:test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// Create UnitTest <span class="token keyword">for</span> Model User <span class="token keyword">in</span> app/Models/User
php artisan make:test Models/UserTest <span class="token parameter variable">--unit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Câu lệnh trên sẽ tạo một file test có đường dẫn <code>tests/Unit/Models/UserTest.php</code></p><p>Để chạy unit test, ta thực hiện câu lệnh sau:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// Run all <span class="token builtin class-name">test</span>
vendor/bin/phpunit
// Run speical <span class="token builtin class-name">test</span>
vendor/bin/phpunit tests/Unit/Models/UserTest.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-assertions" tabindex="-1"><a class="header-anchor" href="#_4-assertions" aria-hidden="true">#</a> 4. Assertions#</h2>`,14),d=a("<li>Assertions là những method rất quan trọng trong quá trình test, assertions giúp ta khẳng định output của các test có<br> đúng với kết quả mong muốn không.</li><li>Một số <code>assertion</code> thường dùng như: <ul><li>assertTrue() / assertFalse() : Khẳng định true hoặc false</li><li>assertEquals() / assertNotEquals() : Khẳng định 2 giá trị có bằng/không bằng nhau</li><li>assertInstanceOf() / assertNotInstanceOf(): Khẳng định đối tượng có phải/ không phải đối tượng của một class</li><li>assertNull()</li><li>assertContains()</li><li>assertCount()</li><li>assertEmpty()</li></ul></li>",2),k=s("br",null,null,-1),v={href:"https://phpunit.readthedocs.io/en/9.5/assertions.html",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="asserttrue-va-assertfalse" tabindex="-1"><a class="header-anchor" href="#asserttrue-va-assertfalse" aria-hidden="true">#</a> assertTrue() và assertFalse()</h3><h2 id="_5-mot-so-vi-du-ve-unittest" tabindex="-1"><a class="header-anchor" href="#_5-mot-so-vi-du-ve-unittest" aria-hidden="true">#</a> 5. Một số ví dụ về UnitTest</h2><ul><li>Unit test cho Model</li></ul><p>Ví dụ, ta có Model Post như dưới đây:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">AppModels</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">IlluminateDatabaseEloquentModel</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">AppModelsUser</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * The attributes that are mass assignable.
     *
     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">array</span></span>
     */</span>
    <span class="token keyword">protected</span> <span class="token variable">$fillable</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;content&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> <span class="token class-name">IlluminateDatabaseEloquentRelationsBelongsTo</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Class test của chúng ta như sau, ở đây ta thực hiện test relationship giữa Post và User:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">TestsUnitModels</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">AppModelsPost</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">AppModelsUser</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">IlluminateDatabaseEloquentRelationsBelongsTo</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">TestsTestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">IlluminateFoundationTestingRefreshDatabase</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">RefreshDatabase</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_post_be_longs_to_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Need to create UserFactory and PostFactory before test</span>
        <span class="token comment">// Use factory to create user and post for test</span>
        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;user_id&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Check foreign key</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getForeignKeyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check instance of beLongsTo</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertInstanceOf</span><span class="token punctuation">(</span><span class="token class-name static-context">BelongsTo</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check instance of User</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertInstanceOf</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token property">user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Unit test cho Repository</li></ul><p>Ví dụ, ta có một PostRepository với method create như dưới đây:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">AppRepositories</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">AppModelsPost</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostRepository</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">model</span> <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">model</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Class test của chúng ta như sau:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">TestsUnitRepositories</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">AppModelsPost</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">AppModelsUser</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">AppRepositoriesPostRepository</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">TestsTestCase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">IlluminateFoundationTestingWithFaker</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">IlluminateFoundationTestingRefreshDatabase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">FakerFactory</span> <span class="token keyword">as</span> Faker<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostRepositoryTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$postRepository</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">postRepository</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_create_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// create data post</span>
        <span class="token variable">$faker</span> <span class="token operator">=</span> <span class="token class-name static-context">Faker</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$postData</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$faker</span><span class="token operator">-&gt;</span><span class="token property">sentence</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;content&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$faker</span><span class="token operator">-&gt;</span><span class="token property">sentence</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;user_id&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">postRepository</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$postData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check post created instance of Post</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertInstanceOf</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Check data post exists in the database</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertDatabaseHas</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token variable">$postData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-reset-database-sau-khi-test" tabindex="-1"><a class="header-anchor" href="#_6-reset-database-sau-khi-test" aria-hidden="true">#</a> 6. Reset database sau khi test</h2><ul><li>Để kết quả những lần test không ảnh hưởng đến những lần test tiếp theo, Laravel đã cung cấp cách thức để reset lại<br> database sau mỗi lần test, bạn chỉ cần sử dụng trait IlluminateFoundationTestingRefreshDatabase trong class test.</li><li>Do databse được reset lại kể cả dữ liệu trước khi chạy test nên hãy cẩn thận khi sử dụng reset database, tốt nhất là<br> nên tạo một database riêng cho việc test.</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">TestsFeature</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">IlluminateFoundationTestingRefreshDatabase</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">IlluminateFoundationTestingWithoutMiddleware</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">TestsTestCase</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ExampleTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">RefreshDatabase</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_basic_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nguon" tabindex="-1"><a class="header-anchor" href="#nguon" aria-hidden="true">#</a> Nguồn:</h2>`,16),h={href:"https://viblo.asia/p/gioi-thieu-ve-unit-testing-trong-laravel-LzD5dredZjY",target:"_blank",rel:"noopener noreferrer"};function b(g,y){const e=i("ExternalLinkIcon");return o(),c("div",null,[u,s("ul",null,[d,s("li",null,[n("Còn rất nhiều các hàm assertions, các bạn có thể tìm hiểu đầy đủ ở"),k,n(" đây: "),s("a",v,[n("https://phpunit.readthedocs.io/en/9.5/assertions.html"),t(e)])])]),m,s("p",null,[n("[1] "),s("a",h,[n("viblo.asia"),t(e)])])])}const T=p(r,[["render",b],["__file","gioi-thieu-unittest-trong-laravel.html.vue"]]);export{T as default};
