import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as p,a as n,b as s,d as t,f as l}from"./app-33017fb1.js";const o="/assets/images/cac-nguyen-tac-lap-trinh-01.png",u="/assets/images/cac-nguyen-tac-lap-trinh-02.png",r={},d=l(`<h1 id="cac-nguyen-tac-lap-trinh" tabindex="-1"><a class="header-anchor" href="#cac-nguyen-tac-lap-trinh" aria-hidden="true">#</a> Các nguyên tắc lập trình</h1><h2 id="solid" tabindex="-1"><a class="header-anchor" href="#solid" aria-hidden="true">#</a> SOLID</h2><p>Trong thế giới năng động của phát triển phần mềm, việc viết mã có thể duy trì và mở rộng là rất quan trọng đối với sự<br> thành công của bất kỳ dự án nào. Các nguyên tắc thiết kế SOLID cung cấp một bộ hướng dẫn có thể giúp các nhà phát triển<br> đạt được chính xác điều đó. Được phát triển bởi Robert C. Martin (Uncle Bob), những nguyên tắc này đã trở thành nền tảng<br> của kiến trúc phần mềm hiện đại. Trong bài đăng này, tôi sẽ khám phá sâu từng nguyên tắc SOLID, hiểu tầm quan trọng của<br> nó và tìm hiểu cách áp dụng chúng một cách hiệu quả với các ví dụ mã hóa thực tế.</p><h3 id="_1-nguyen-tac-trach-nhiem-duy-nhat-single-responsibility-principle-srp" tabindex="-1"><a class="header-anchor" href="#_1-nguyen-tac-trach-nhiem-duy-nhat-single-responsibility-principle-srp" aria-hidden="true">#</a> 1. Nguyên tắc trách nhiệm duy nhất (Single Responsibility Principle SRP):</h3><p>Nguyên tắc trách nhiệm duy nhất nhấn mạnh rằng một lớp học chỉ nên có một lý do để thay đổi. Nói cách khác, một lớp<br> học nên có một trách nhiệm hoặc nhiệm vụ duy nhất. Bằng cách tuân thủ SRP, chúng tôi đảm bảo rằng mỗi lớp có một mục<br> đích rõ ràng, làm cho mã trở nên mô-đun hơn, dễ bảo trì hơn và dễ hiểu hơn.</p><p>Hãy minh họa SRP bằng một ví dụ:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Bad Practice - One class with multiple responsibilities</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">OrderProcessingService</span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">ProcessOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
   <span class="token comment">// ... Process the order ...</span>
   <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">SendEmailConfirmation</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Send email confirmation ...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">GenerateInvoice</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Generate the invoice ...</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Good Practice - Separate classes with single responsibility</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">OrderProcessor</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">ProcessOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Process the order ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">EmailService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">SendEmailConfirmation</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Send email confirmation ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">InvoiceGenerator</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">GenerateInvoice</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Generate the invoice ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-nguyen-tac-mo-đong-open-closed-principle-ocp" tabindex="-1"><a class="header-anchor" href="#_2-nguyen-tac-mo-đong-open-closed-principle-ocp" aria-hidden="true">#</a> 2. Nguyên tắc mở-đóng (Open-Closed Principle OCP):</h3><p>Nguyên tắc đóng mở gợi ý rằng các thực thể phần mềm nên được mở để mở rộng nhưng đóng để sửa đổi. Bằng cách sử dụng<br> các giao diện, chúng tôi tuân thủ OCP và tạo ra các hệ thống linh hoạt và thích ứng hơn có thể dễ dàng mở rộng mà<br> không thay đổi mã hiện có.</p><p>Hãy xem cách áp dụng OCP:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Bad Practice - Modifying existing class</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Shape</span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> virtual double <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
   <span class="token comment">// ... Calculate area ...</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
   
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Circle</span> <span class="token punctuation">:</span> Shape
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> override double <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
   <span class="token comment">// ... Calculate circle area ...</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
   
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Square</span> <span class="token punctuation">:</span> Shape
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> override double <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
   <span class="token comment">// ... Calculate square area ...</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Good Practice - Extending behavior through interfaces</span>
<span class="token keyword">interface</span> <span class="token class-name-definition class-name">IShape</span>
<span class="token punctuation">{</span>
    double <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Circle</span> <span class="token punctuation">:</span> IShape
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> double <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Calculate circle area ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Square</span> <span class="token punctuation">:</span> IShape
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> double <span class="token function">Area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Calculate square area ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-nguyen-tac-thay-the-liskov-liskov-substitution-principle-lsp" tabindex="-1"><a class="header-anchor" href="#_3-nguyen-tac-thay-the-liskov-liskov-substitution-principle-lsp" aria-hidden="true">#</a> 3. Nguyên tắc thay thế Liskov (Liskov Substitution Principle LSP):</h3><p>Nguyên lý thay thế Liskov nhấn mạnh rằng các đối tượng của các lớp dẫn xuất nên được thay thế cho các đối tượng của<br> lớp cơ sở mà không ảnh hưởng đến tính chính xác của chương trình. Bằng cách tuân theo LSP, chúng tôi đảm bảo rằng các<br> lớp phái sinh có thể thay thế liền mạch các đối tác lớp cơ sở của chúng, thúc đẩy tính nhất quán và khả năng bảo trì<br> mã.</p><p>Hãy duy trì LSP:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Bad Practice - Violating LSP</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Bird</span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> virtual <span class="token keyword type-declaration">void</span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
   <span class="token comment">// ... Fly like a bird ...</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Penguin</span> <span class="token punctuation">:</span> Bird
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> override <span class="token keyword type-declaration">void</span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotSupportedException</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Penguins cannot fly.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Good Practice - Upholding LSP</span>
<span class="token keyword">interface</span> <span class="token class-name-definition class-name">IFlyable</span>
<span class="token punctuation">{</span>
    <span class="token keyword type-declaration">void</span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Bird</span> <span class="token punctuation">:</span> IFlyable
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
   <span class="token comment">// ... Fly like a bird ...</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Penguin</span> <span class="token punctuation">:</span> IFlyable
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">Fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
   <span class="token comment">// Penguins cannot fly, but still conform to the interface.</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-nguyen-tac-phan-tach-giao-dien-interface-segregation-principle-isp" tabindex="-1"><a class="header-anchor" href="#_4-nguyen-tac-phan-tach-giao-dien-interface-segregation-principle-isp" aria-hidden="true">#</a> 4. Nguyên tắc phân tách giao diện (Interface Segregation Principle ISP):</h3><p>Nguyên tắc phân tách giao diện khuyên bạn nên tách các giao diện thành các giao diện nhỏ hơn, tập trung hơn, thay vì<br> có các giao diện lớn, nguyên khối. Bằng cách tuân thủ ISP, chúng tôi tạo ra các giao diện gọn gàng và tập trung hơn,<br> cho phép khả năng bảo trì và khả năng thích ứng mã tốt hơn.</p><p>Hãy triển khai ISP:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Bad Practice - Large, monolithic interface</span>
<span class="token keyword">interface</span> <span class="token class-name-definition class-name">IWorker</span>
<span class="token punctuation">{</span>
   <span class="token keyword type-declaration">void</span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword type-declaration">void</span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword type-declaration">void</span> <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Robot</span> <span class="token punctuation">:</span> IWorker
<span class="token punctuation">{</span>
    <span class="token comment">// Implementing unnecessary methods for a robot.</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Human</span> <span class="token punctuation">:</span> IWorker
<span class="token punctuation">{</span>
    <span class="token comment">// Implementing unnecessary methods for a human.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Good Practice - Segregated interfaces</span>
<span class="token keyword">interface</span> <span class="token class-name-definition class-name">IWorkable</span>
<span class="token punctuation">{</span>
    <span class="token keyword type-declaration">void</span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name-definition class-name">IEatable</span>
<span class="token punctuation">{</span>
    <span class="token keyword type-declaration">void</span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name-definition class-name">ISleepable</span>
<span class="token punctuation">{</span>
    <span class="token keyword type-declaration">void</span> <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Robot</span> <span class="token punctuation">:</span> IWorkable
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
   <span class="token comment">// ... Rob   ot work logic ...</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Human</span> <span class="token punctuation">:</span> IWorkable<span class="token punctuation">,</span> IEatable<span class="token punctuation">,</span> ISleepable
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
    <span class="token comment">// ... Human work logic ...</span>
   <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Human eat logic ...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Human sleep logic ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-nguyen-tac-đao-nguoc-phu-thuoc-dependency-inversion-principle-dip" tabindex="-1"><a class="header-anchor" href="#_5-nguyen-tac-đao-nguoc-phu-thuoc-dependency-inversion-principle-dip" aria-hidden="true">#</a> 5. Nguyên tắc đảo ngược phụ thuộc (Dependency Inversion Principle DIP):</h3><p>Nguyên tắc đảo ngược phụ thuộc đề nghị dựa vào trừu tượng hơn là triển khai cụ thể. Bằng cách tuân theo DIP, chúng<br> tôi thúc đẩy <strong>loose coupling</strong> và cho phép kiểm tra dễ dàng hơn, khả năng mở rộng và thiết kế mô-đun hơn.</p><p>Hãy áp dụng DIP:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Bad Practice - High-level module depends on low-level module</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">OrderProcessor</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> EmailService _emailService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">OrderProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _emailService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmailService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">ProcessOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Process the order ...</span>
        _emailService<span class="token operator">.</span><span class="token function">SendEmailConfirmation</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// Good Practice - High-level module depends on abstraction</span>
<span class="token keyword">interface</span> <span class="token class-name-definition class-name">IEmailService</span>
<span class="token punctuation">{</span>
    <span class="token keyword type-declaration">void</span> <span class="token function">SendEmailConfirmation</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">EmailService</span> <span class="token punctuation">:</span> IEmailService
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">SendEmailConfirmation</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Send email confirmation ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">OrderProcessor</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IEmailService _emailService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">OrderProcessor</span><span class="token punctuation">(</span>IEmailService emailService<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _emailService <span class="token operator">=</span> emailService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword type-declaration">void</span> <span class="token function">ProcessOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// ... Process the order ...</span>
        _emailService<span class="token operator">.</span><span class="token function">SendEmailConfirmation</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kết hợp các nguyên tắc <strong>SOLID</strong> trong hành trình phát triển phần mềm của bạn có thể mang tính chuyển đổi. Những nguyên<br> tắc<br> này trao quyền cho các nhà phát triển viết mã sạch hơn, dễ bảo trì hơn và có thể mở rộng hơn, dẫn đến các giải pháp phần<br> mềm mạnh mẽ và có thể mở rộng. Khi bạn áp dụng <strong>SRP</strong>, <strong>OCP</strong>, <strong>LSP</strong>, <strong>ISP</strong> và <strong>DIP</strong> trong các dự án của mình,<br> bạn sẽ chứng kiến sự<br> phát triển của sức mạnh mã hóa của mình và sự xuất hiện của mã thực sự sạch sẽ đứng trước thử thách của thời gian. Nắm<br> bắt các nguyên tắc <strong>SOLID</strong> và nâng cao kỹ năng mã hóa của bạn lên một tầm cao mới!</p><h2 id="dry" tabindex="-1"><a class="header-anchor" href="#dry" aria-hidden="true">#</a> DRY</h2><p>Ngày xửa ngày xưa, một nhà phát triển trẻ sợ hãi (tôi) muốn viết mã tuyệt vời. Tôi đã thấy nhiều thế hệ nhà phát triển<br> nói về nó, khi chúng ta nói về kim tự tháp hai ngàn năm sau khi xây dựng. Tôi muốn để lại dấu ấn của mình trên thế giới!</p><p>Do đó, tôi đã làm những gì tôi nghĩ là tốt nhất: tránh mọi cạm bẫy mà mọi người cảm thấy mắc phải, bằng cách tuân theo<br> các <strong>Holy Coding Principles</strong>, được tạo ra bởi những <strong>Ones Who Have the Knowledge</strong>.</p><p>Tôi đã theo dõi họ một cách quyết liệt. Đó là tôn giáo của tôi, giáo phái của tôi, cách sống của tôi. Sau khi nghe về<br> nguyên tắc DRY, mã của tôi đột nhiên trở nên KHÔ như Sahara. Tôi thề với mặt trăng, bầu trời và mười hai vị thần: Không<br> có gì sẽ được lặp lại trong mật mã của tôi! Bao giờ!</p><p>Điều này dẫn đến nhiều, rất nhiều vấn đề.</p><p>Tôi hiểu rằng các nguyên tắc cần phải được hiểu rõ, bằng cách đọc những cuốn sách mà chúng được xác định, và không chỉ<br> nhận xét ngẫu nhiên trên stack overflow. Tôi cũng hiểu rằng các nguyên tắc nên được sử dụng tùy thuộc vào bối cảnh.</p><p>Một lời nhắc nhở nhỏ cho những người ở phía sau không tuân theo: nguyên tắc DRY có nghĩa là &quot;Đừng lặp lại chính mình&quot; và<br> lần đầu tiên được giới thiệu trong cuốn sách <strong><em>The Pragmatic Programmer</em></strong>. Bản thân nguyên tắc này đã được biết đến và<br> áp<br> dụng trước khi cuốn sách này đi vào cuộc sống; nhưng Lập trình viên thực dụng đã định nghĩa chính xác nó và đặt ra tên<br> của nó.</p><p>Không chần chừ gì nữa, hãy cùng đi sâu vào những vùng đất tuyệt vời của DRY nhé! Nếu bạn cảm thấy bạn muốn đốt bài viết<br> này hoặc để che nó bằng lời khen ngợi, hãy điền miễn phí để lại nhiều bình luận để tăng vinh quang của tôi.</p><h3 id="dry-la-ve-su-trung-lap-kien-thuc" tabindex="-1"><a class="header-anchor" href="#dry-la-ve-su-trung-lap-kien-thuc" aria-hidden="true">#</a> DRY là về sự trùng lặp kiến thức</h3><p>Ngay cả khi cụm từ <strong>Don&#39;t Repeat Yourself</strong> nghe có vẻ đơn giản, nó cũng nghe có vẻ quá chung chung. Trong <strong>The<br> Pragmatic<br> Programmer</strong>, DRY được định nghĩa là</p><blockquote><p>Mỗi phần kiến thức phải có một đại diện duy nhất, rõ ràng, có thẩm quyền trong một hệ thống.</p></blockquote><p>Nó đặt ra câu hỏi: <em>một phần kiến thức là gì?</em> Tôi sẽ định nghĩa nó là:</p><ul><li>Một chức năng chính xác trong lĩnh vực kinh doanh của ứng dụng của bạn.</li><li>Một thuật toán.</li></ul><p>Để lấy một ví dụ thương mại điện tử được sử dụng quá mức, một lớp <code>shipment</code> và hành vi của nó sẽ là một phần của<br><em>business domain</em><br> của ứng dụng của bạn. Một lô hàng là một cái gì đó thực tế mà công ty của bạn sử dụng để gửi sản phẩm cho khách hàng của<br> họ.</p><p>Do đó, logic của <code>shipment</code> này chỉ nên xuất hiện một lần trong ứng dụng. Tại sao?</p><p>Hãy tưởng tượng rằng bạn cần gửi lô hàng đến một nhà kho. Bạn cần kích hoạt hành vi này ở 76 vị trí khác nhau trong ứng<br> dụng của mình. Không vấn đề gì: bạn lặp lại logic 76 lần.</p><p>Sau một thời gian, sếp của bạn đến gặp bạn và yêu cầu bạn thay đổi hành vi này. Thay vì gửi lô hàng đến một kho, bạn cần<br> gửi chúng đến ba kho khác nhau.</p><p>Kết quả? Bạn sẽ dành rất nhiều thời gian cho logic lô hàng của mình, vì bạn sẽ phải thay đổi nó ở 76 nơi khác nhau! Đây<br> là một sự lãng phí thời gian, và một cách tốt để tạo ra lỗi để chọc giận sếp của bạn.</p><p>Giải pháp: tạo ra một đại diện duy nhất cho <em>knowledge</em> của bạn. Đặt logic để gửi lô hàng ở một nơi và sau đó sử dụng<br> biểu<br> diễn kiến thức này ở bất cứ đâu bạn cần. Ví dụ: gửi một lô hàng có thể là một phương thức thuộc lớp <code>Shipment</code> mà bạn có<br> thể sử<br> dụng lại ở mọi nơi bạn thao tác với một loạt các lô hàng này. Chúc mừng! Bạn đã tạo ra một sự trừu tượng mới.</p><p>Hãy lấy một ví dụ khác. Hãy tưởng tượng rằng bạn đã mã hóa một lớp ưa thích để phân tích cú pháp <code>B-tree</code>. Đây cũng có<br> thể<br> được coi là <em>knowledge</em>: đó là một thuật toán nên được xác định một lần. Việc thể hiện <em>knowledge</em> đó nên được sử dụng ở<br> mọi<br> nơi mà không lặp lại chính <em>knowledge</em>.</p><h3 id="dry-va-trung-lap-ma" tabindex="-1"><a class="header-anchor" href="#dry-va-trung-lap-ma" aria-hidden="true">#</a> DRY và trùng lặp mã</h3><p>Vì vậy, DRY là tất cả về kiến thức? Tất cả về logic kinh doanh?</p><p>Hãy xem xét một số đoạn mã để hiểu tại sao:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">interface</span> <span class="token class-name-definition class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">displayPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PlasticDuck</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">int</span></span> */</span>
    <span class="token keyword">private</span> <span class="token variable">$price</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$price</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">price</span> <span class="token operator">=</span> <span class="token variable">$price</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">displayPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;The price of this plastic duck is %d euros!&quot;</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">price</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$plasticDuck</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlasticDuck</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$plasticDuck</span><span class="token operator">-&gt;</span><span class="token function">displayPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mã này trông không tệ lắm, phải không?</p><p>Dave, nhà phát triển đồng nghiệp của bạn, nghĩ rằng điều đó thật kinh khủng. Sau khi nhìn vào mật mã bạn đã viết, anh ta<br> đến bàn làm việc của bạn và hét lên:</p><ol><li>Từ <code>price</code> này được lặp lại 6 lần!</li><li>Phương pháp <code>displayPrice()</code> này được lặp lại trong giao diện và thực hiện nó!</li></ol><p>Câu trả lời của bạn rất nhanh chóng:</p><ol><li>Các biến (và thuộc tính) <code>price</code> như cần được lặp lại trong mã của bạn. Nó không phải là một chức năng.</li><li><em>Kiến thức</em> (hiển thị giá) chỉ có mặt một lần, trong chính phương pháp.</li></ol><p>Không vi phạm DRY ở đây.</p><p>Dave không nói nên lời, cảm thấy hào quang mạnh mẽ của bạn chiếu sáng cả căn phòng.</p><p>Nhưng bạn đã tấn công chuyên môn của Dave: anh ấy tức giận. Anh ấy muốn giành chiến thắng trong cuộc tranh luận. Chẳng<br> mấy chốc, anh ta tìm thấy một đoạn mã khác mà bạn đã viết; Anh ta quay lại bàn làm việc của bạn, tát vào mặt bạn:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">CsvValidation</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">validateProduct</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$product</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$product</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;color&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Import fail: the product attribute color is missing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$product</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;size&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Import fail: the product attribute size is missing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$product</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Import fail: the product attribute type is missing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dave, đầy mình, tuyên bố: &quot;Con lợn nhỏ! Mã này không KHÔ!&quot;. Và bạn, nhận thức được nguyên tắc DRY thực sự là gì, hãy trả<br> lời: &quot;Nhưng logic kinh doanh, kiến thức, vẫn không được lặp lại!&quot;.</p><p>Một lần nữa, bạn đã đúng. Phương thức xác thực một số đầu ra CSV chỉ ở một nơi (<code>validateProduct()</code>). Đây là kiến thức,<br> và nó không lặp lại.</p><p>Nhưng Dave chưa sẵn sàng chấp nhận nó! &quot;Còn tất cả những điều kiện đó ở khắp mọi nơi thì sao? Đó <code>if</code>? Đó không phải là<br> một<br> sự vi phạm rõ ràng đối với nguyên tắc DRY sao?&quot;</p><p>Bạn có một giọng trầm để trả lời, phát âm từng từ một cách hoàn hảo, kiến thức của bạn nảy lên tường để tạo ra tiếng<br> vang vô hạn của nhận thức:</p><p>&quot;Ừm... Không. Không phải vậy. Tôi sẽ gọi đó là sự trùng lặp mã không cần thiết, nhưng không vi phạm nguyên tắc DRY&quot;.</p><p>Đột nhiên, ngón tay của bạn gõ trên bàn phím, với tốc độ ánh sáng, mã sau:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">CsvValidation</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$productAttributes</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;color&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;size&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">validateProduct</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$product</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">productAttributes</span> <span class="token keyword">as</span> <span class="token variable">$attribute</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$product</span><span class="token punctuation">[</span><span class="token variable">$attribute</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Exception</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Import fail: the product attribute %s is missing&#39;</span><span class="token punctuation">,</span> <span class="token variable">$attribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nó có vẻ tốt hơn, phải không? Không còn trùng lặp mã nữa!</p><p>Tóm lại:</p><ol><li><strong>Knowledge duplication</strong> luôn là vi phạm nguyên tắc DRY.</li><li><strong>Code duplication</strong> không nhất thiết vi phạm nguyên tắc DRY.</li></ol><p>Dave vẫn chưa bị thuyết phục. Với một sự thanh thản thách thức các bậc thầy tâm linh cao nhất qua các thời đại, bạn đưa<br> ra nét cuối cùng. Bạn lấy một cuốn sách trên bàn và đọc như sau:</p><blockquote><p>Nhiều người đã lấy nó [nguyên tắc DRY] để chỉ đề cập đến mã: họ nghĩ rằng DRY có nghĩa là &quot;don’t copy-and-paste lines<br> of source.&quot;. [...] DRY là về sự trùng lặp của kiến thức, của ý định. Đó là về việc thể hiện cùng một điều ở hai nơi<br> khác<br> nhau, có thể theo hai cách hoàn toàn khác nhau.</p></blockquote><p>Đây là từ ấn bản kỷ niệm 20 năm của Lập trình viên thực dụng, cùng một cuốn sách đã đặt ra nguyên tắc DRY.</p><h3 id="dry-everything-cong-thuc-cho-tham-hoa" tabindex="-1"><a class="header-anchor" href="#dry-everything-cong-thuc-cho-tham-hoa" aria-hidden="true">#</a> DRY Everything: Công thức cho thảm họa</h3><h4 id="tong-quat-nguy-hiem" tabindex="-1"><a class="header-anchor" href="#tong-quat-nguy-hiem" aria-hidden="true">#</a> Tổng quát nguy hiểm</h4><p>Hãy lấy một ví dụ thú vị hơn. Một cái gì đó đã xảy ra trong cuộc sống™ thực.</p><p>Tôi đang làm việc trên một ứng dụng cho các nhà làm phim. Họ có thể tải lên phim và siêu dữ liệu của họ (tiêu đề, mô tả,<br> diễn viên và đoàn làm phim...) bằng giao diện người dùng của ứng dụng. Thông tin này được hiển thị trên nền tảng VOD.</p><p>Kiến trúc của ứng dụng được lấy cảm hứng từ mẫu MVC và trông như thế này:</p><figure><img src="`+o+'" alt="Cây tệp dự án cơ bản" tabindex="0" loading="lazy"><figcaption>Cây tệp dự án cơ bản</figcaption></figure><p>Nhóm nội dung của công ty cũng có thể sử dụng ứng dụng này. Họ có thể tạo ra siêu dữ liệu của bộ phim khi các nhà làm<br> phim không muốn tự làm điều đó.</p><p>Các nhà làm phim và đội ngũ nội dung có những nhu cầu khác nhau. Nhóm nội dung được sử dụng để làm việc với các hệ thống<br> quản lý nội dung, các nhà làm phim thì không. Do đó, chúng tôi quyết định tạo hai giao diện:</p><ul><li>Cái đầu tiên cho nhóm nội dung, không có hướng dẫn hoặc giải thích, nơi bạn có thể nhập nội dung nhanh nhất có thể.</li><li>Một cái khác dành cho các nhà làm phim, với trải nghiệm người dùng thân thiện hơn.</li></ul><p>Đây là những gì chúng tôi đã làm:</p><figure><img src="'+u+`" alt="Cây tệp dự án cơ bản" tabindex="0" loading="lazy"><figcaption>Cây tệp dự án cơ bản</figcaption></figure><p>Các bộ điều khiển từ hai ứng dụng khác nhau gần như giống nhau. Nó không chỉ là về tên của họ: việc triển khai của họ,<br> quá. Về cơ bản, chúng tôi đã sao chép-dán chúng.</p><p>Điều này trông giống như một sự vi phạm rõ ràng và xấu xí đối với nguyên tắc DRY: <code>views</code> và <code>controller</code> lặp đi lặp<br> lại khắp nơi! Chúng ta có thể đã tạo ra một sự trừu tượng để nhóm logic chung, như một lớp trừu tượng chẳng hạn. Nhưng<br> điều này sẽ kết hợp các bộ điều khiển của hai ứng dụng khác nhau với nhau.</p><p>Thay đổi lớp trừu tượng và mọi bộ điều khiển của bạn cần hỗ trợ thay đổi mà không bị phá vỡ.</p><p>Trong nhiều trường hợp, chúng tôi biết rằng giao diện sẽ phát triển khác nhau trong tương lai. Chúng ta sẽ tạo ra rất<br> nhiều điều kiện trong các hành động của bộ điều khiển nếu chúng ta tạo một bộ điều khiển cho cả hai ứng dụng. Không ai<br> muốn một rừng các lệnh <code>if</code>; Mã kết quả sẽ phức tạp hơn nhiều.</p><p>Ngoài ra, các bộ điều khiển không nên chứa bất kỳ logic nghiệp vụ nào. Nếu bạn nhớ lại định nghĩa của nguyên tắc DRY, đó<br> là <em>knowledge</em> này, logic kinh doanh này không nên bị trùng lặp.</p><p>Nói tóm lại, cố gắng áp dụng DRY ở mọi nơi có thể có hai kết quả:</p><ul><li>Khớp nối không cần thiết.</li><li>Sự phức tạp không cần thiết.</li></ul><p>Bạn không muốn bất kỳ điều nào trong số này trong cơ sở mã của mình.</p><h4 id="tai-cau-truc-som" tabindex="-1"><a class="header-anchor" href="#tai-cau-truc-som" aria-hidden="true">#</a> Tái cấu trúc sớm</h4><p>Bạn không nên áp dụng nguyên tắc DRY nếu logic nghiệp vụ của bạn chưa có bất kỳ sự trùng lặp nào. Một lần nữa, nó phụ<br> thuộc vào bối cảnh, nhưng, theo nguyên tắc thông thường, cố gắng áp dụng DRY cho một cái gì đó chỉ được sử dụng ở một<br> nơi có thể dẫn đến khái quát hóa sớm.</p><p>Nếu bạn bắt đầu khái quát hóa một cái gì đó bởi vì &quot;nó có thể hữu ích sau này&quot;, xin vui lòng không. Tại sao?</p><ol><li>Bạn sẽ dành thời gian để tạo ra các khái niệm trừu tượng (các lớp trừu tượng và những thứ khác) có thể chỉ được sử<br> dụng<br> ở một nơi, mãi mãi. Nhu cầu kinh doanh có thể thay đổi rất nhanh và mạnh mẽ: hôm nay, mọi người sẽ nói với bạn rằng<br> bạn<br> cần một số khái quát &quot;cho tương lai&quot;, và ngày mai, mọi người sẽ quên nó đi.</li><li>Một lần nữa, bạn có thể sẽ giới thiệu sự phức tạp và <strong>coupling</strong> trong mã của bạn mà không có lợi ích.<br> Tái sử dụng mã và sao chép mã là hai điều khác nhau. DRY nói rằng bạn không nên sao chép kiến thức, không phải là bạn<br> nên sử dụng trừu tượng để tái sử dụng mọi thứ, ở mọi nơi.</li></ol><p>Đây là những gì tôi đã học được qua nhiều năm: mã cho cụ thể ngay từ đầu và đừng cố gắng khái quát hóa. Ngay cả khi<br> người quản lý của bạn muốn có 90% ứng dụng của bạn có thể tái sử dụng cho mọi trường hợp sử dụng. Trong thực tế, điều<br> này gần như không bao giờ có thể.</p><p>Hai chức năng, ngay cả khi chúng trông rất giống nhau ngay từ cái nhìn đầu tiên, có thể trở nên rất khác nhau trong<br> tương lai. Nếu bạn có bất kỳ nghi ngờ nào, tốt hơn là sao chép mã của bạn và để nó đi theo con đường khác.</p><p>Sandy Metz đã nói điều đó tốt hơn tôi:</p><blockquote><p>Duplication is far cheaper than the wrong abstraction.<br> Sao chép rẻ hơn nhiều so với trừu tượng sai.</p></blockquote><p>Viết mã trước tiên, làm cho nó hoạt động, và sau đó ghi nhớ tất cả các nguyên tắc bạn biết để tái cấu trúc sau đó và chỉ<br> khi bạn cần nó.</p><p>Vi phạm nguyên tắc DRY nên được xử lý khi kiến thức đã và rõ ràng là trùng lặp.</p><h4 id="kien-thuc-ten-mien-tuong-tu" tabindex="-1"><a class="header-anchor" href="#kien-thuc-ten-mien-tuong-tu" aria-hidden="true">#</a> Kiến thức tên miền tương tự...?</h4><p>Tôi đã viết ở trên rằng sự lặp lại kiến thức luôn vi phạm nguyên tắc DRY. Điều này chỉ áp dụng khi cùng một kiến thức<br> được lặp lại. Hãy lấy một ví dụ:</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token doc-comment comment">/** Shipment from the warehouse to the customer */</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Shipment</span>
<span class="token punctuation">{</span>
     <span class="token keyword">public</span> <span class="token variable">$deliveryTime</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//in days</span>

     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">calculateDeliveryDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">DateTime</span>
     <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>DateTime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;now +<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">deliveryTime</span><span class="token punctuation">}</span></span> day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** Order return of a customer */</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">OrderReturn</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$returnLimit</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//in days</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">calculateLastReturnDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">DateTime</span>
    <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>DateTime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;now +<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">returnLimit</span><span class="token punctuation">}</span></span> day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bạn có thể nghe thấy Dave, nhà phát triển đồng nghiệp của bạn, nhẹ nhàng hét vào tai bạn một lần nữa: &quot;Đây là một sự vi<br> phạm rõ ràng đối với tất cả những gì tôi tin tưởng! Còn nguyên tắc DRY thì sao? Tim tôi đang chảy máu!&quot;.</p><p>Tuy nhiên, Dave lại sai. Từ góc độ thương mại điện tử, thời gian giao hàng của lô hàng cho khách<br> hàng (<code>Shipment::calculateDeliveryDay()</code>) không liên quan gì đến ngày cuối cùng khách hàng có thể trả lại sản phẩm đã<br> đặt của mình (<code>Return::calculateLastReturnDay</code>). Những gì dường như là một sự trùng lặp của kiến thức chỉ là một sự<br> trùng hợp ngẫu nhiên thuần túy.</p><p>Điều gì xảy ra nếu bạn kết hợp hai phương pháp đó trong một? Nếu công ty của bạn quyết định rằng khách hàng hiện có một<br> tháng để trả lại sản phẩm của mình, bạn sẽ phải chia nhỏ phương pháp một lần nữa. Nếu không, việc giao hàng cũng sẽ mất<br> một tháng!</p><p>Đây không phải là cách tốt nhất để làm hài lòng khách hàng.</p><h3 id="dry-khong-chi-la-ve-ma" tabindex="-1"><a class="header-anchor" href="#dry-khong-chi-la-ve-ma" aria-hidden="true">#</a> DRY không chỉ là về mã</h3><p>DRY không phải là thứ bạn chỉ nên tôn trọng trong mã của mình. Bạn không nên lặp lại kiến thức về lĩnh vực kinh doanh<br> của mình trong bất cứ điều gì liên quan đến dự án của bạn.</p><p>Để trích dẫn Dave Thomas một lần nữa:</p><blockquote><p>A system’s knowledge is far broader than just its code. It refers to database schemas, test plans, the build system,<br> even documentation.</p><p>Kiến thức của một hệ thống rộng hơn nhiều so với chỉ mã của nó. Nó đề cập đến lược đồ cơ sở dữ liệu, kế hoạch kiểm<br> tra, hệ thống xây dựng, thậm chí cả tài liệu.</p></blockquote><p>Ý tưởng về DRY rất đơn giản về mặt lý thuyết: bạn không cần phải cập nhật song song nhiều thứ khi một thay đổi xảy ra.<br> Nếu kiến thức của bạn được lặp lại hai lần trong mã của bạn và bạn cần thay đổi nó, bạn có thể quên thay đổi nó ở mọi<br> nơi. Trong tài liệu của bạn, nó có thể dẫn đến những quan niệm sai lầm, nhầm lẫn và cuối cùng là triển khai sai.</p><h3 id="ap-dung-dry-tuy-thuoc-vao-ngu-canh" tabindex="-1"><a class="header-anchor" href="#ap-dung-dry-tuy-thuoc-vao-ngu-canh" aria-hidden="true">#</a> Áp dụng DRY tùy thuộc vào ngữ cảnh</h3><p>Khi bắt đầu sự nghiệp, tôi thường là nạn nhân của chứng tê liệt phân tích. Tất cả những nguyên tắc đó kìm hãm tôi để làm<br> việc năng suất và hiệu quả. Nó quá phức tạp và tôi không muốn làm hỏng mọi thứ.</p><p>Tuy nhiên, nguyên tắc không phải là quy tắc bạn phải tuân theo. Chúng là công cụ để bạn đi theo hướng tốt. Công việc của<br> bạn là điều chỉnh chúng tùy thuộc vào tình huống.</p><p>Trên thực tế, hầu hết các nguyên tắc tốt đều là sự đánh đổi: khi bạn áp dụng nguyên tắc DRY, bạn làm cho mã của mình dễ<br> hiểu hơn, nhưng phạm vi thay đổi của bạn trở nên rộng hơn.</p><h2 id="nguon" tabindex="-1"><a class="header-anchor" href="#nguon" aria-hidden="true">#</a> <strong>Nguồn:</strong></h2>`,121),h=n("br",null,null,-1),k={href:"https://github.com/kawser2133/SOLID-design-principles",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),v={href:"https://thevaluable.dev/dry-principle-cost-benefit-example/",target:"_blank",rel:"noopener noreferrer"};function g(b,y){const a=e("ExternalLinkIcon");return c(),p("div",null,[d,n("p",null,[s("[1]"),h,n("a",k,[s("kawser2133/SOLID-design-principles"),t(a)])]),n("p",null,[s("[2]"),m,n("a",v,[s("The DRY Principle: Benefits and Costs with Examples"),t(a)])])])}const q=i(r,[["render",g],["__file","cac-nguyen-tac-lap-trinh.html.vue"]]);export{q as default};
